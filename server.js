// server.js

// --- 1. Importa√ß√µes ---
import express from 'express';
import cors from 'cors';
import axios from 'axios';
import dotenv from 'dotenv';
import mongoose from 'mongoose';
import Veiculo from "./models/veiculo.js";
import Manutencao from "./models/manutencao.js"; // <-- NOVO: Importa o modelo Manutencao

// --- 2. Configura√ß√£o de Vari√°veis de Ambiente ---
dotenv.config();

// --- 3. Constantes e Configura√ß√£o Inicial ---
const app = express();
const PORT = process.env.PORT || 3001;
const mongoUrl = process.env.DATABASE_URL;

// --- 4. Middlewares ---
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// --- 5. Conex√£o com o Banco de Dados (via Mongoose) ---
if (!mongoUrl) {
    console.error("‚ùå ERRO: A vari√°vel de ambiente DATABASE_URL n√£o foi encontrada. Verifique seu arquivo .env.");
    process.exit(1);
}

mongoose.connect(mongoUrl)
  .then(() => {
    console.log('‚úÖ Conectado com sucesso ao MongoDB Atlas via Mongoose!');
    app.listen(PORT, () => {
        console.log(`üöÄ Servidor rodando em http://localhost:${PORT}`);
    });
  })
  .catch((error) => {
    console.error('‚ùå Erro ao conectar com o MongoDB Atlas:', error.message);
    process.exit(1);
  });

// --- ENDPOINTS CRUD PARA VE√çCULOS (Sem altera√ß√µes) ---

/**
 * [CREATE] POST /api/veiculos
 */
app.post('/api/veiculos', async (req, res) => {
    try {
        const novoVeiculoData = req.body;
        const veiculoCriado = await Veiculo.create(novoVeiculoData);
        console.log('[Servidor] Ve√≠culo criado com sucesso:', veiculoCriado);
        res.status(201).json(veiculoCriado);
    } catch (error) {
        console.error("[Servidor] Erro ao criar ve√≠culo:", error);
        if (error.code === 11000) return res.status(409).json({ error: 'Ve√≠culo com esta placa j√° existe.' });
        if (error.name === 'ValidationError') return res.status(400).json({ error: Object.values(error.errors).map(val => val.message).join(' ') });
        res.status(500).json({ error: 'Erro interno ao criar ve√≠culo.' });
    }
});

/**
 * [READ ALL] GET /api/veiculos
 */
app.get('/api/veiculos', async (req, res) => {
    try {
        const veiculos = await Veiculo.find();
        console.log(`[Servidor] ${veiculos.length} ve√≠culos encontrados.`);
        res.status(200).json(veiculos);
    } catch (error) {
        console.error("[Servidor] Erro ao buscar ve√≠culos:", error);
        res.status(500).json({ error: 'Erro interno ao buscar ve√≠culos.' });
    }
});

/**
 * [DELETE] DELETE /api/veiculos/:id 
 */
app.delete('/api/veiculos/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const veiculoParaRemover = await Veiculo.findById(id);
        if (!veiculoParaRemover) {
            return res.status(404).json({ error: 'Ve√≠culo n√£o encontrado para remo√ß√£o.' });
        }
        
        // Antes de remover o ve√≠culo, remove todas as manuten√ß√µes associadas a ele.
        await Manutencao.deleteMany({ veiculo: id });
        console.log(`[Servidor] Manuten√ß√µes do ve√≠culo ${id} foram removidas.`);

        // Agora remove o ve√≠culo.
        const veiculoRemovido = await Veiculo.findByIdAndDelete(id);
        console.log(`[Servidor] Ve√≠culo removido: ${id}`);
        res.status(200).json({ message: 'Ve√≠culo e seu hist√≥rico de manuten√ß√£o foram removidos com sucesso.' }); 
        
    } catch (error) {
        console.error(`[Servidor] Erro ao remover ve√≠culo e suas manuten√ß√µes ${req.params.id}:`, error);
        res.status(500).json({ error: 'Erro interno ao remover ve√≠culo.' });
    }
});


// --- NOVO: ENDPOINTS CRUD PARA MANUTEN√á√ïES ---

/**
 * [CREATE] POST /api/manutencoes
 * Endpoint para registrar uma nova manuten√ß√£o para um ve√≠culo.
 * O corpo da requisi√ß√£o deve conter os dados da manuten√ß√£o e o _id do ve√≠culo.
 */
app.post('/api/manutencoes', async (req, res) => {
    try {
        const { descricaoServico, custo, quilometragem, veiculo } = req.body;

        // Verifica se o ve√≠culo associado realmente existe
        const veiculoExiste = await Veiculo.findById(veiculo);
        if (!veiculoExiste) {
            return res.status(404).json({ error: 'Ve√≠culo n√£o encontrado. N√£o √© poss√≠vel registrar a manuten√ß√£o.' });
        }

        const novaManutencao = await Manutencao.create({
            descricaoServico,
            custo,
            quilometragem,
            veiculo // Link para o ve√≠culo
        });

        console.log(`[Servidor] Nova manuten√ß√£o registrada para o ve√≠culo ${veiculo}`);
        res.status(201).json(novaManutencao);

    } catch (error) {
        console.error("[Servidor] Erro ao registrar manuten√ß√£o:", error);
        if (error.name === 'ValidationError') {
            return res.status(400).json({ error: Object.values(error.errors).map(val => val.message).join(' ') });
        }
        res.status(500).json({ error: 'Erro interno ao registrar manuten√ß√£o.' });
    }
});

/**
 * [READ ALL FOR A VEHICLE] GET /api/veiculos/:veiculoId/manutencoes
 * Endpoint para buscar todas as manuten√ß√µes de um ve√≠culo espec√≠fico.
 * Demonstra o poder do relacionamento.
 */
app.get('/api/veiculos/:veiculoId/manutencoes', async (req, res) => {
    try {
        const { veiculoId } = req.params;

        // Busca todas as manuten√ß√µes que t√™m o campo 'veiculo' igual a veiculoId.
        // .sort({ data: -1 }) ordena os resultados da data mais recente para a mais antiga.
        const historico = await Manutencao.find({ veiculo: veiculoId }).sort({ data: -1 });

        console.log(`[Servidor] Encontrado hist√≥rico de ${historico.length} manuten√ß√µes para o ve√≠culo ${veiculoId}.`);
        res.status(200).json(historico);

    } catch (error) {
        console.error(`[Servidor] Erro ao buscar hist√≥rico do ve√≠culo ${req.params.veiculoId}:`, error);
        res.status(500).json({ error: 'Erro interno ao buscar o hist√≥rico de manuten√ß√µes.' });
    }
});


/**
 * [DELETE] DELETE /api/manutencoes/:id
 * Endpoint para remover um registro de manuten√ß√£o espec√≠fico.
 */
app.delete('/api/manutencoes/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const manutencaoRemovida = await Manutencao.findByIdAndDelete(id);

        if (!manutencaoRemovida) {
            return res.status(404).json({ error: 'Registro de manuten√ß√£o n√£o encontrado.' });
        }

        console.log(`[Servidor] Registro de manuten√ß√£o removido: ${id}`);
        res.status(200).json({ message: 'Registro de manuten√ß√£o removido com sucesso.' });

    } catch (error) {
        console.error(`[Servidor] Erro ao remover manuten√ß√£o ${req.params.id}:`, error);
        res.status(500).json({ error: 'Erro interno ao remover manuten√ß√£o.' });
    }
});


// --- ROTA PROXY PARA API DE CLIMA (Sem altera√ß√µes) ---
app.get('/api/previsao/:cidade', async (req, res) => {
    //... (c√≥digo existente sem modifica√ß√µes)
});