// server.js - VERS√ÉO COMPLETA E CORRIGIDA

import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';

// Importa√ß√£o dos modelos
import Veiculo from './models/veiculo.js';
import Manutencao from './models/manutencao.js';
import User from './models/User.js'; // <-- Importa o novo modelo de usu√°rio

// --- 2. Configura√ß√£o de Vari√°veis de Ambiente ---
dotenv.config();

// --- 3. Constantes e Configura√ß√£o Inicial ---
const app = express();
const PORT = process.env.PORT || 3001;
const mongoUrl = process.env.DATABASE_URL;
const JWT_SECRET = process.env.JWT_SECRET || 'seu_segredo_super_secreto_para_desenvolvimento'; // <-- Adicione uma JWT_SECRET no seu .env para produ√ß√£o!

// --- 4. Middlewares ---
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// --- 5. Conex√£o com o Banco de Dados ---
mongoose.connect(mongoUrl)
  .then(() => {
    console.log('‚úÖ Conectado com sucesso ao MongoDB Atlas via Mongoose!');
    app.listen(PORT, () => {
        console.log(`üöÄ Servidor rodando em http://localhost:${PORT}`);
    });
  })
  .catch((error) => {
    console.error('‚ùå Erro ao conectar com o MongoDB Atlas:', error.message);
    process.exit(1);
  });

// --- NOVO: MIDDLEWARE DE AUTENTICA√á√ÉO ---
const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1]; // Formato esperado: "Bearer TOKEN"

    if (token == null) {
        return res.sendStatus(401); // Unauthorized: Se n√£o h√° token
    }

    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) {
            return res.sendStatus(403); // Forbidden: Se o token for inv√°lido
        }
        req.user = user; // Adiciona os dados do usu√°rio (ex: id, email) ao objeto da requisi√ß√£o
        next(); // Continua para a rota
    });
};

// --- NOVAS: ROTAS DE AUTENTICA√á√ÉO ---

// [REGISTER] POST /api/auth/register
app.post('/api/auth/register', async (req, res) => {
    try {
        const { email, password } = req.body;
        if (!email || !password) {
            return res.status(400).json({ error: 'E-mail e senha s√£o obrigat√≥rios.' });
        }
        const newUser = new User({ email, password });
        await newUser.save();
        res.status(201).json({ message: 'Usu√°rio registrado com sucesso!' });
    } catch (error) {
        if (error.code === 11000) {
            return res.status(409).json({ error: 'Este e-mail j√° est√° em uso.' });
        }
        res.status(500).json({ error: 'Erro ao registrar usu√°rio.', details: error.message });
    }
});

// [LOGIN] POST /api/auth/login
app.post('/api/auth/login', async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(401).json({ error: 'Credenciais inv√°lidas.' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(401).json({ error: 'Credenciais inv√°lidas.' });
        }

        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, { expiresIn: '8h' });
        res.json({ message: 'Login bem-sucedido!', token });
    } catch (error) {
        res.status(500).json({ error: 'Erro interno no servidor.' });
    }
});

// --- ENDPOINTS CRUD PARA VE√çCULOS (AGORA PROTEGIDOS E ATUALIZADOS) ---

// [CREATE] POST /api/veiculos
app.post('/api/veiculos', authenticateToken, async (req, res) => { // <-- Rota protegida
    try {
        const novoVeiculoData = {
            ...req.body,
            owner: req.user.id // <-- Associa o ve√≠culo ao usu√°rio logado
        };
        const veiculoCriado = await Veiculo.create(novoVeiculoData);
        res.status(201).json(veiculoCriado);
    } catch (error) {
        res.status(500).json({ error: 'Erro interno ao criar ve√≠culo.' });
    }
});

// [READ ALL] GET /api/veiculos
app.get('/api/veiculos', authenticateToken, async (req, res) => { // <-- Rota protegida
    try {
        // Encontra apenas os ve√≠culos cujo 'owner' seja o ID do usu√°rio logado
        const veiculos = await Veiculo.find({ owner: req.user.id });
        res.status(200).json(veiculos);
    } catch (error) {
        res.status(500).json({ error: 'Erro interno ao buscar ve√≠culos.' });
    }
});

// Outras rotas (GET ONE, UPDATE, DELETE) tamb√©m devem ser protegidas com `authenticateToken`
// e devem verificar se o ve√≠culo pertence ao usu√°rio logado antes de realizar a a√ß√£o.

// Exemplo para DELETE:
app.delete('/api/veiculos/:id', authenticateToken, async (req, res) => {
    try {
        const { id } = req.params;
        
        const veiculo = await Veiculo.findOne({ _id: id, owner: req.user.id });
        if (!veiculo) {
            return res.status(404).json({ error: 'Ve√≠culo n√£o encontrado ou n√£o pertence a este usu√°rio.' });
        }
        
        await Manutencao.deleteMany({ veiculo: id });
        await Veiculo.findByIdAndDelete(id);

        res.status(200).json({ message: 'Ve√≠culo removido com sucesso.' });
    } catch (error) {
        res.status(500).json({ error: 'Erro interno ao remover ve√≠culo.' });
    }
});


// --- ENDPOINTS CRUD PARA MANUTEN√á√ïES ---

/**
 * [CREATE] POST /api/veiculos/:veiculoId/manutencoes
 */
app.post('/api/veiculos/:veiculoId/manutencoes', async (req, res) => {
    try {
        const { veiculoId } = req.params;
        const { descricaoServico, custo, quilometragem } = req.body;

        const veiculoExiste = await Veiculo.findById(veiculoId);
        if (!veiculoExiste) {
            return res.status(404).json({ error: 'Ve√≠culo n√£o encontrado. N√£o √© poss√≠vel registrar a manuten√ß√£o.' });
        }

        const novaManutencao = await Manutencao.create({
            descricaoServico,
            custo,
            quilometragem,
            veiculo: veiculoId
        });

        console.log(`[Servidor] Nova manuten√ß√£o registrada para o ve√≠culo ${veiculoId}`);
        res.status(201).json(novaManutencao);
    } catch (error) {
        console.error("[Servidor] Erro ao registrar manuten√ß√£o:", error);
        if (error.name === 'ValidationError') {
            return res.status(400).json({ error: Object.values(error.errors).map(val => val.message).join(' ') });
        }
        res.status(500).json({ error: 'Erro interno ao registrar manuten√ß√£o.' });
    }
});

/**
 * [READ ALL FOR A VEHICLE] GET /api/veiculos/:veiculoId/manutencoes
 */
app.get('/api/veiculos/:veiculoId/manutencoes', async (req, res) => {
    try {
        const { veiculoId } = req.params;
        const historico = await Manutencao.find({ veiculo: veiculoId }).sort({ data: -1 });

        console.log(`[Servidor] Encontrado hist√≥rico de ${historico.length} manuten√ß√µes para o ve√≠culo ${veiculoId}.`);
        res.status(200).json(historico);
    } catch (error) {
        console.error(`[Servidor] Erro ao buscar hist√≥rico do ve√≠culo ${req.params.veiculoId}:`, error);
        res.status(500).json({ error: 'Erro interno ao buscar o hist√≥rico de manuten√ß√µes.' });
    }
});

mongoose.connect(mongoUrl)
  .then(() => {
    console.log('‚úÖ Conectado com sucesso ao MongoDB Atlas via Mongoose!');

    // >>>>> ESTA √â A PARTE CR√çTICA <<<<<
    // O SERVIDOR S√ì COME√áA A "ESCUTAR" DEPOIS QUE A CONEX√ÉO COM O BANCO D√Å CERTO.
    app.listen(PORT, () => {
        console.log(`üöÄ Servidor rodando em http://localhost:${PORT}`);
    });
    // >>>>> FIM DA PARTE CR√çTICA <<<<<

  })
  .catch((error) => {
    console.error('‚ùå Erro ao conectar com o MongoDB Atlas:', error.message);
    process.exit(1);
  });